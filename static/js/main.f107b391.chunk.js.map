{"version":3,"sources":["logo.svg","Components/InputForm.js","Components/Output.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","InputForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","join","used","forecast","isToday","setState","e","target","value","preventDefault","console","log","today","Date","props","getUserInput","showOutput","curr","setDate","getDate","date","toISOString","substr","react_default","a","createElement","className","onSubmit","handleSubmit","bind","type","onChange","handleJoinChange","onClick","setG10Date","maxlength","placeholder","pattern","handleUsedChange","handleForecastChange","defaultValue","id","Component","Output","leave","toFixed","balance","App","joinDate","difference1","Math","round","abs","getTime","forecastDay","difference2","leaveBalance","forecastBalance","calculate","href","rel","Components_InputForm","Components_Output","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f107b391.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\n\r\n// Stylesheets\r\nimport './Style_InputForm.css'\r\n\r\nclass InputForm extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            join: 0,\r\n            used: 0,\r\n            forecast: 0,\r\n\r\n            isToday: true,\r\n        }\r\n    }\r\n\r\n    setG10Date(){\r\n        this.setState({join: \"16/07/2018\"});\r\n    }\r\n\r\n    handleJoinChange(e){\r\n        this.state.join = e.target.value;\r\n    }\r\n\r\n    handleUsedChange(e){\r\n        this.state.used = e.target.value;\r\n    }\r\n\r\n    handleForecastChange(e){\r\n        this.state.isToday = false;\r\n        this.state.forecast = e.target.value;\r\n    }\r\n\r\n    handleSubmit(e){\r\n        e.preventDefault();\r\n\r\n        console.log(\"Fuck this shit\");\r\n        console.log(this.state);\r\n\r\n        if(this.state.isToday){\r\n            let today = new Date();\r\n            this.props.getUserInput(this.state.join, this.state.used, today, true);\r\n            this.props.showOutput();\r\n        }\r\n        else{\r\n            this.props.getUserInput(this.state.join, this.state.used, this.state.forecast, false);\r\n            this.props.showOutput();\r\n        }\r\n    }\r\n\r\n  render() {\r\n\r\n    /* Getting Today's date to default into forecast input field */\r\n    var curr = new Date();\r\n    curr.setDate(curr.getDate());\r\n    var date = curr.toISOString().substr(0,10);\r\n\r\n    return (\r\n      <div className=\"inputform\">\r\n          <form onSubmit={this.handleSubmit.bind(this)}>\r\n\r\n            <table>\r\n                <tbody>\r\n                    <tr>\r\n                        <td>\r\n                            <ul>\r\n                                <li>\r\n                                    Join Date: <br/><br/>\r\n                                    <input type=\"date\" onChange={this.handleJoinChange.bind(this)} className=\"inputField\"/> <br/><br/>\r\n                                    <div className=\"gradButtonContainer\">\r\n                                        <span className = \"gradButtonWrapper\"><span className= \"gradButton\"> G1 </span></span>\r\n                                        <span className = \"gradButtonWrapper\"><span className= \"gradButton\"> G2 </span></span>\r\n                                        <span className = \"gradButtonWrapper\"><span className= \"gradButton\"> G3 </span></span>\r\n                                        <span className = \"gradButtonWrapper\"><span className= \"gradButton\"> G4 </span></span>\r\n                                        <span className = \"gradButtonWrapper\"><span className= \"gradButton\"> G5 </span></span>\r\n                                        <span className = \"gradButtonWrapper\"><span className= \"gradButton\"> G6 </span></span>\r\n                                    </div>\r\n                                    <div className=\"gradButtonContainer\">\r\n                                        <span className = \"gradButtonWrapper\"><span className= \"gradButton\"> G7 </span></span>\r\n                                        <span className = \"gradButtonWrapper\"><span className= \"gradButton\"> G8 </span></span>\r\n                                        <span className = \"gradButtonWrapper\"><span className= \"gradButton\"> G9 </span></span>\r\n                                        <span className = \"gradButtonWrapper\"><span className= \"gradButton\" onClick={this.setG10Date.bind(this)}> G10 </span></span>\r\n                                        <span className = \"gradButtonWrapper\"><span className= \"gradButton\"> G11 </span></span>\r\n                                    </div>\r\n                                </li>\r\n\r\n                                <li>\r\n                                    Leaves Used: <br/><br/>\r\n                                    <input type=\"text\" maxlength=\"3\" placeholder=\"From 0 to 999 (Days)\" pattern=\"\\d*\" onChange={this.handleUsedChange.bind(this)} className=\"inputField\"/>\r\n                                </li>\r\n\r\n                                <li>\r\n                                    Forecast Date: <br/><br/>\r\n                                    <input type=\"date\" onChange={this.handleForecastChange.bind(this)} defaultValue={date} className=\"inputField\"/>\r\n                                </li>\r\n                            </ul>\r\n                        </td>\r\n                    </tr>\r\n                    \r\n                    <tr>\r\n                        <td>\r\n                            <input id=\"submitButton\" type=\"submit\" value=\"Go!\" className=\"submitButton\" /> \r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n\r\n          </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputForm;\r\n","import React, { Component } from 'react';\r\n\r\n// Stylesheets\r\nimport './Style_Output.css'\r\n\r\nclass Output extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <table className=\"outputTable\">\r\n            <tbody>\r\n\r\n                <tr>\r\n                    <td>    \r\n                    </td>\r\n                    <td>\r\n                        Hours    \r\n                    </td>\r\n                    <td>    \r\n                        Days\r\n                    </td>\r\n                </tr>\r\n\r\n                <tr>\r\n                    <td>\r\n                        Leave Balance\r\n                    </td>\r\n                    <td>\r\n                        {this.props.leave}\r\n                    </td>\r\n                    <td>\r\n                        {(this.props.leave / 7.5).toFixed(2)}\r\n                    </td>\r\n                </tr>\r\n\r\n                <tr>\r\n                    <td>\r\n                        Forecasted Balance\r\n                    </td>\r\n                    <td>\r\n                        {this.props.balance}\r\n                    </td>\r\n                    <td>\r\n                        {(this.props.balance / 7.5).toFixed(2)}\r\n                    </td>\r\n                </tr>\r\n\r\n            </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Output;\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n// Components\n// Components\nimport InputForm from './Components/InputForm';\nimport Output from './Components/Output';\n\nconst accrue = 5/12;\nconst oneDay = 24*60*60*1000;\n\nclass App extends Component {\n\n  constructor(){\n    super();\n\n    this.state = {\n      join: 0,\n      used: 0,\n      forecast: 0,\n\n      leave: 0,\n      balance: 0,\n\n      showOutput: false,\n    }\n  }\n\n  calculate(){\n    let today = new Date();\n    let joinDate = this.state.join;\n    let difference1 = Math.round(Math.abs((today.getTime() - joinDate.getTime())/(oneDay)));\n\n    let forecastDay = this.state.forecast;\n    let difference2 = Math.round(Math.abs((forecastDay.getTime() - today.getTime())/(oneDay)));\n\n    let leaveBalance = difference1 * accrue - this.state.used * 7.5;\n    let forecastBalance = difference2 * accrue + leaveBalance;\n\n    leaveBalance = leaveBalance.toFixed(2);\n    forecastBalance = forecastBalance.toFixed(2);\n    \n    this.setState({leave: leaveBalance});\n    this.setState({balance: forecastBalance});\n\n    console.log(\"+++LEAVES: \" + this.state.leave);\n    console.log(\"+++BALANCE: \" + this.state.balance);\n  }\n\n  getUserInput(join, used, forecast, isToday){    \n    if(isToday){\n      this.state.forecast = forecast;\n    }\n    else{\n      this.state.forecast = new Date(forecast);\n    }\n    this.state.join = new Date(join);\n    this.state.used = used;\n\n    this.calculate();\n  }\n\n  showOutput(){\n    this.setState({showOutput: true});\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <header>\n          <link href=\"https://fonts.googleapis.com/css?family=Gruppo\" rel=\"stylesheet\"/>\n          <b> eHR Annual Leaves Forecaster </b>\n        </header>\n\n        <br/><br/>\n\n        <InputForm\n        showOutput = {this.showOutput.bind(this)}\n        getUserInput = {this.getUserInput.bind(this)}\n        />\n\n        <br/>\n        <br/>\n\n        <Output\n        leave = {this.state.leave}\n        balance = {this.state.balance}\n        />\n\n        <br/>\n\n        <footer>\n          Note: 2018 Forced Leaves was 6 days\n        </footer>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}