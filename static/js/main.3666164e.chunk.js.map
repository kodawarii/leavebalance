{"version":3,"sources":["logo.svg","Components/InputForm.js","Components/Output.js","Components/Container.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","InputForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","join","used","forecast","e","target","value","preventDefault","console","log","props","getUserInput","react_default","a","createElement","onSubmit","handleSubmit","bind","type","onChange","handleJoinChange","ref","handleUsedChange","handleForecastChange","id","className","Component","Output","leave","balance","forceUpdate","onClick","update","Container","Components_InputForm","Components_Output","App","today","Date","joinDate","difference1","Math","round","abs","getTime","forecastDay","difference2","leaveBalance","forecastBalance","calculate","Components_Container","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3666164e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\n\r\nclass InputForm extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            join: 0,\r\n            used: 0,\r\n            forecast: 0,\r\n        }\r\n    }\r\n\r\n    handleJoinChange(e){\r\n        this.state.join = e.target.value;\r\n    }\r\n\r\n    handleUsedChange(e){\r\n        this.state.used = e.target.value;\r\n    }\r\n\r\n    handleForecastChange(e){\r\n        this.state.forecast = e.target.value;\r\n    }\r\n\r\n    handleSubmit(e){\r\n        e.preventDefault();\r\n\r\n        console.log(\"Fuck this shit\");\r\n        console.log(this.state);\r\n\r\n        this.props.getUserInput(this.state.join, this.state.used, this.state.forecast);\r\n    }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n          <form onSubmit={this.handleSubmit.bind(this)}>\r\n            <p>Enter Join Date:</p>\r\n            <input type=\"date\" onChange={this.handleJoinChange.bind(this)} />\r\n\r\n            <p>Enter Leaves Used:</p>\r\n            <input type=\"text\" ref=\"\" onChange={this.handleUsedChange.bind(this)} />\r\n\r\n            <p>Enter Forecast Date:</p> \r\n            <input type=\"date\" ref=\"\" onChange={this.handleForecastChange.bind(this)} />\r\n\r\n            <br/><br/>\r\n            <input id=\"submitButton\" type=\"submit\" value=\"Calculate Forecast\" className=\"submitButton\" />         \r\n          </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputForm;\r\n","import React, { Component } from 'react';\r\n\r\nclass Output extends Component {\r\n   \r\n    constructor(){\r\n        super();\r\n    \r\n        this.state = {\r\n          leave: 0,\r\n          balance: 0,\r\n        }\r\n    }\r\n\r\n    update(){\r\n        this.forceUpdate();\r\n        this.leave = this.props.leave;\r\n        this.balance = this.props.balance;\r\n        console.log(\"--Leaves: \" + this.props.leave);\r\n        console.log(\"--Balance: \" + this.props.balance);\r\n        console.log(\"++Leaves: \" + this.state.leave);\r\n        console.log(\"++Balance: \" + this.state.balance);\r\n    }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button onClick={this.update.bind(this)}> Show Results </button>\r\n        <p>Output: </p>\r\n        <p> Leave Balance: {this.state.leave} </p>\r\n        <br/>\r\n        <p> Forecasted balance: {this.state.balance}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Output;\r\n","import React, { Component } from 'react';\r\n\r\n// Components\r\nimport InputForm from './InputForm';\r\nimport Output from './Output';\r\n\r\nclass Container extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n       <InputForm\r\n        getUserInput = {this.props.getUserInput.bind(this)}/\r\n        >\r\n\r\n        <br/>\r\n\r\n        <Output\r\n        leave = {this.props.leave}\r\n        balance = {this.props.balance}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Container;\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n// Components\nimport Container from './Components/Container';\n\nconst accrue = 5/12;\nconst oneDay = 24*60*60*1000;\n\nclass App extends Component {\n\n  constructor(){\n    super();\n\n    this.state = {\n      join: 0,\n      used: 0,\n      forecast: 0,\n\n      leave: 0,\n      balance: 0,\n    }\n  }\n\n  calculate(){\n    let today = new Date();\n    let joinDate = this.state.join;\n    let difference1 = Math.round(Math.abs((today.getTime() - joinDate.getTime())/(oneDay)));\n\n    let forecastDay = this.state.forecast;\n    let difference2 = Math.round(Math.abs((forecastDay.getTime() - today.getTime())/(oneDay)));\n\n    let leaveBalance = difference1 * accrue - this.state.used * 7.5;\n    let forecastBalance = difference2 * accrue + leaveBalance;\n    \n    this.state.leave = leaveBalance;\n    this.state.balance = forecastBalance;\n  }\n\n  getUserInput(join, used, forecast){    \n    this.state.join = new Date(join);\n    this.state.used = used;\n    this.state.forecast = new Date(forecast);\n\n    this.calculate();\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n\n        <Container\n        getUserInput = {this.getUserInput.bind(this)}\n        leave = {this.state.leave}\n        balance = {this.state.balance}\n        />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}